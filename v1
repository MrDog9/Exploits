local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "MrExploits", HidePremium = false, IntroEnabled = true, IntroText = "Made by MrDog", SaveConfig = true, ConfigFolder = "MrDogExploitSave"})

-- WINDOWS -- 

local HatchingTab = Window:MakeTab({
	Name = "Hatching",
	PremiumOnly = false
})

local AutoDeleteTab = Window:MakeTab({
	Name = "Auto Delete",
	PremiumOnly = false
})

local MiscTab = Window:MakeTab({
	Name = "Misc",
	PremiumOnly = false
})

-- VALUES --

_G.FCAutoHatch = true
_G.FCEggName = "Egg"
_G.FCEggAmount = "Buy1"
_G.FCEggDelay = 0
_G.FCAutoCollect = true

function FCAutoHatch()
    while _G.FCAutoHatch == true do
        local args ={
            [1] = (_G.FCEggName),
            [2] = (_G.FCEggAmount)
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.BuyEgg:InvokeServer(unpack(args))
        wait(_G.FCEggDelay)
    end
end

function FCAutoCollect()
    while _G.FCAutoCollect == true do
        for i, v in pairs(game.Workspace.Collectables:GetChildren()) do
            for i, b in pairs(v:GetChildren()) do
                b.Hitbox.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            end
        end
        wait(0)
    end
end

HatchingTab:AddDropdown({
	Name = "Egg Name",
	Default = "Select Egg",
	Options = {"Ocean Egg", "Common Egg", "Solar Egg"},
	Callback = function(Value)
		_G.FCEggName = Value
	end    
})

HatchingTab:AddDropdown({
	Name = "Egg Amount",
	Default = "Select Amount",
	Options = {"Buy8", "Buy3", "Buy1"},
	Callback = function(Value)
		_G.FCEggAmount = Value
	end    
})

HatchingTab:AddDropdown({
	Name = "Egg Delay",
	Default = "Select Delay",
	Options = {1, 0.75, 0.5, 0.25, 0.1, 0},
	Callback = function(Value)
		_G.FCEggDelay = Value
	end    
})

HatchingTab:AddToggle({
	Name = "AutoHatch",
	Default = false,
	Callback = function(Value)
        _G.FCAutoHatch = Value
        if Value == true then
            OrionLib:MakeNotification({
	            Name = "Auto Hatch",
	            Content = "Auto Hatch has is Enabled",
	            Image = "rbxassetid://9194077649",
	            Time = 1.5
            })
        else
            OrionLib:MakeNotification({
	            Name = "Auto Hatch",
	            Content = "Auto Hatch has is Disabled",
	            Image = "rbxassetid://9194077649",
	            Time = 1.5
            })
        end
        FCAutoHatch()
	end    
})

HatchingTab:AddButton({
	Name = "Teleport to egg",
	Callback = function()
      	game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Eggs:FindFirstChild(_G.FCEggName).View.CFrame
  	end    
})

MiscTab:AddToggle({
	Name = "Auto Collectables",
	Default = false,
	Callback = function(Value)
        _G.FCAutoCollect = Value
        FCAutoCollect()
	end    
})

AutoDeleteTab:AddToggle({
	Name = "Auto Delete Commons",
	Default = false,
	Callback = function(Value)
        if Value == true then
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Common",
            [2] = true
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        else
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Common",
            [2] = false
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        end
	end    
})

AutoDeleteTab:AddToggle({
	Name = "Auto Delete Rares",
	Default = false,
	Callback = function(Value)
        if Value == true then
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Rare",
            [2] = true
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        else
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Rare",
            [2] = false
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        end
	end    
})

AutoDeleteTab:AddToggle({
	Name = "Auto Delete Epics",
	Default = false,
	Callback = function(Value)
        if Value == true then
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Epic",
            [2] = true
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        else
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Epic",
            [2] = false
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        end
	end    
})

AutoDeleteTab:AddToggle({
	Name = "Auto Delete Legendarys",
	Default = false,
	Callback = function(Value)
        if Value == true then
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Legendary",
            [2] = true
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        else
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Legendary",
            [2] = false
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        end
	end    
})

AutoDeleteTab:AddToggle({
	Name = "Auto Delete Mythics",
	Default = false,
	Callback = function(Value)
        if Value == true then
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Mythic",
            [2] = true
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        else
            local args = { -- AUTO DELETE COMMONS --
            [1] = "Mythic",
            [2] = false
        }
        game:GetService("ReplicatedStorage").GameClient.Events.RemoteFunction.AutoDelete:InvokeServer(unpack(args))
        end
	end    
})

OrionLib:Init()
